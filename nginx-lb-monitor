#!/usr/bin/env python
from __future__ import print_function

import datetime
import os
import socket
import subprocess
import sys
import time

import docker
import jinja2


DOCKER_HOST = os.environ.get('DOCKER_HOST', 'unix://var/run/docker.sock')
HOSTNAME = socket.gethostname()
PORTS = [int(p) for p in os.environ.get('PORTS', '80').split(',')]

dcli = docker.Client(base_url=DOCKER_HOST)

tmpl = jinja2.Template("""
error_log /dev/stderr warn;
pid /var/run/nginx/nginx.pid;
user nginx;
worker_processes 1;

events {
    worker_connections  1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    server {
        listen 80 default;
        return 503;
    }

    # Docker apps
    {% for name, containers in apps.items() %}

    # Start app: {{ name }}
    upstream {{ name }} {
        least_conn;
        {% for c in containers %}
        server {{ c.public_ip }}:{{ c.public_port }}; # {{ c.id }}
        {% endfor %}
    }

    server {
        listen 80;
        server_name {{ name }};

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://{{ name }};
        }
    }
    # End app: {{ name }}

    {% endfor %}
}
""")


def docker_apps():
    apps = {}

    for c in dcli.containers():
        # Skip this container
        if c['Id'].startswith(HOSTNAME):
            continue

        if len(c['Ports']) == 0:
            continue

        for p in c['Ports']:

            if 'IP' in p and p['PrivatePort'] in PORTS:
                c_name = get_app_name(c['Names'][0])

                if c_name == "":
                    print("ERROR: could not estabilish app name for %s" % c['Names'][0])
                    break

                if c_name not in apps:
                    apps[c_name] = []

                apps[c_name].append({
                    'id': c['Names'][0].strip('/'),
                    'public_ip': p['IP'] if p['IP'] != '0.0.0.0' else '172.17.42.1',
                    'public_port': p['PublicPort'],
                })

    return apps


def nginx_config(apps):
    with open('/etc/nginx/nginx.conf', 'wb') as fp:
        fp.write(tmpl.render(apps=apps))


def nginx_reload():
    """
    Test NGINX config and
    """
    subprocess.check_call(['/usr/sbin/nginx', '-t'])
    subprocess.check_call(['/usr/sbin/nginx', '-s', 'reload'])


def get_app_name(name):
    """
    get_app_name returns the app name with process type

    /nginx-lb_web_1 -> nginx-lb_web
    """
    return '_'.join(name.lstrip('/').split('_')[:-1])


def monitor_events(since):
    """Monitor Docker events and update NGINX config as needed.
    """
    statuses = ('destroy', 'kill', 'start', 'stop')
    for ev in dcli.events(since=since, decode=True):
        if ev['status'] not in statuses:
            continue
        print('Received events, reconfiguring...', end='')
        nginx_config(docker_apps())
        nginx_reload()
        print('done.')


if __name__ == '__main__':
    print('Initializing...', end='')
    nginx_config(docker_apps())
    nginx_reload()
    print('done.')

    try:
        since = datetime.datetime.now()
        while True:
            print('Listening to Docker events since %s' % since)
            monitor_events(since)
            time.sleep(1.0)  # avoids burst
            since = datetime.datetime.now()

    except KeyboardInterrupt:
        print('Shutting down...')
        sys.exit(0)
